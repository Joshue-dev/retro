import Head from 'next/head';
import {Fragment, useState} from 'react';
import {useRouter} from 'next/router';
import {Box, Stack, Text, Spinner, Flex, useToast, useDisclosure, Center} from '@chakra-ui/react';
import {AccountTransactionDetails} from '../../../page.components/agents_components/account/AccountTransactionDetails';
import {useQuery} from 'react-query';
import {
  fetchAccountInfo,
  getAccountGraphDetails,
  fetchRecentCommissions,
  fetchWithdrawal,
  fetchAgentsAccountUpcomingPayments,
} from '../../../api/agents';

import AgentsLayoutView from '/src/page.components/agents_components/AgentLayout/View';
import OverViewHeader from '../../../page.components/agents_components/account/graph_section/OverViewHeader';
import GraphRepresentation from '../../../page.components/agents_components/account/graph_section/GraphRepresentation';
import TransactionsOverview from '../../../page.components/agents_components/account/graph_section/TransactionsOverview';
import WithdrawalModal from '../../../page.components/agents_components/account/WithdrawalModal';
import AgentCustomersAccountOverview from '../../../page.components/agents_components/account/graph_section/AgentCustomersAccountOverview';
import {OvalLoader} from 'components/common/loaders/AnimatedLoader';

export const Account = () => {
  const router = useRouter();
  const toast = useToast();
  const [filterByVal, setFilterByVal] = useState('2');
  const WITHDRAWAL_DRAWER = useDisclosure();

  const storeName =
    typeof window !== 'undefined' &&
    localStorage.getItem('agentDetails') &&
    JSON?.parse(localStorage?.getItem('agentDetails'))['developer_link'];

  const ACCOUNTEQUITYOVERVIEW = useQuery(['account-agent-overview'], fetchAccountInfo);

  const ACCOUNT_GRAPH_OVERVIEW = useQuery(['dashboard-graph-overview', filterByVal], () =>
    getAccountGraphDetails(filterByVal)
  );

  const ACCOUNT__WITHDRAWAL = useQuery(
    ['agent-withdrawaL'],

    fetchWithdrawal
  );

  const ACCOUNT__COMMISSION = useQuery(['agent-commission'], fetchRecentCommissions);

  const ACCOUNT_INCOMING_PAYMENT = useQuery(
    ['agent-incoming-payment'],
    fetchAgentsAccountUpcomingPayments
  );

  if (ACCOUNT__COMMISSION?.isError) {
    toast({
      title: 'Oops ...',
      description: `${
        ACCOUNT__COMMISSION?.error?.response?.data?.message ??
        ACCOUNT__COMMISSION?.error?.response?.message ??
        ACCOUNT__COMMISSION?.error?.message ??
        'Something went wrong,kindly check your network connection'
      }`,
      status: 'error',
      duration: 8000,
      isClosable: true,
      position: 'top-right',
    });
    return (
      <AgentsLayoutView activePage={'account'}>
        <Box mt="20px"></Box>
        <Text mt="50px">Oops something went wrong</Text>
      </AgentsLayoutView>
    );
  }
  return (
    <Fragment>
      <AgentsLayoutView activePage={'account'}>
        {ACCOUNT_GRAPH_OVERVIEW.isLoading ||
        ACCOUNT__WITHDRAWAL.isLoading ||
        ACCOUNT_INCOMING_PAYMENT.isLoading ||
        ACCOUNTEQUITYOVERVIEW.isLoading ||
        ACCOUNT__COMMISSION.isLoading ? (
          <Center h="70vh" w="100%">
            <OvalLoader />
          </Center>
        ) : (
          <Box bg="#FAFAFA" className="relative w-100" px={6}>
            <Head>
              <title>Veerge | Account</title>
              <meta name="description" content="Generated by create next app" />
              <meta name="theme-color" content="#723fe2" />
              <link rel="icon" href="/favicon.ico" />
              <link rel="shortcut icon" href="/favicon.ico" />
            </Head>

            <main className=" text-[#333]">
              <div className="flex flex-row items-center justify-end -mt-2">
                <div className="flex flex-row items-center gap-3">
                  <WithdrawalModal drawerDisclosure={WITHDRAWAL_DRAWER} />
                </div>
              </div>

              <Flex justify="center" mt="21px" gap="25px" h={{base: 'auto', md: 325}}>
                <Box
                  w="100%"
                  maxW={876}
                  bg="#FFF"
                  border="1px solid #F4F4F4"
                  boxShadow="0px 4px 8px rgba(0, 0, 0, 0.02)"
                  borderRadius="16px"
                  p={4}
                >
                  <OverViewHeader
                    filterByVal={filterByVal}
                    setFilterByVal={setFilterByVal}
                    data={ACCOUNT_GRAPH_OVERVIEW?.data?.data?.data?.card_data}
                    showing={
                      filterByVal == '2'
                        ? '1 Week'
                        : filterByVal == '3'
                        ? '1 Month'
                        : filterByVal == '4'
                        ? '1 Year'
                        : null
                    }
                  />

                  <Stack direction="row" spacing={2} justifyContent="space-between">
                    <GraphRepresentation filterValue={filterByVal} />
                    <TransactionsOverview
                      data={ACCOUNT_GRAPH_OVERVIEW?.data?.data?.data?.card_data}
                    />
                  </Stack>
                </Box>
                <AgentCustomersAccountOverview data={ACCOUNTEQUITYOVERVIEW?.data?.data} />
              </Flex>

              <AccountTransactionDetails
                payouts={ACCOUNT__WITHDRAWAL?.data?.data?.data}
                recentTransactions={ACCOUNT__COMMISSION?.data?.data?.data}
                upcomingPayment={ACCOUNT_INCOMING_PAYMENT.data?.data?.data}
              />
            </main>
          </Box>
        )}
      </AgentsLayoutView>
    </Fragment>
  );
};
export default Account;
